@using System.Reflection

@helper DumpModel(object obj, bool isRecursing = false) {
    
    
    
    
    var uuid = string.Format("dump-model-table-{0}", Guid.NewGuid().ToString("N"));
    if (!isRecursing) {
        <style>
            .-dumped-model-table,
            .-dumped-model-table > caption {
                font-size: 11px;   
                border: 1px solid #000;
            }

            .-dumped-model-table > caption {
                background-color: #000;
                color: #fff;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }

            .-dumped-model-table {
                background-color: #FFF;
                position: fixed;
                top: 5px;
                right: 5px;
                z-index: 9999;
                border-top-left-radius: 0;
                border-top-right-radius: 0;
            }
        </style>
    }

    <table @if (!isRecursing) { 
        @: id="@uuid" class="-dumped-model-table table-bordered table-condensed"
    }>

        @if (!isRecursing)
        {
            <caption>@obj.GetType().Name</caption>
            <thead>
                <tr>
                    <th width="1px">Name</th>
                    <th width="1px">Value</th>
                    <th width="1px">
                        <a title="Close Inspector" onclick="document.getElementById('@uuid').remove()">&times;</a>
                    </th>
                </tr>
            </thead>
        }
        <tbody>
            @foreach (PropertyInfo prop in obj.GetType().GetProperties())
            {
                var typeName = prop.PropertyType.Name.ToString();
                var propName = prop.Name;
                var propValue = prop.GetValue(obj, null);
                var propValueString = string.Empty;
                if (propValue == null)
                {
                    propValueString = "null";
                }
                else if (propValue.GetType().IsValueType || propValue is string)
                {
                    propValueString = propValue.ToString();
                }
                else
                {
                    propValueString = propValue.GetType().Name;
                }


                <tr>
                    <td title="@typeName">@propName</td>
                    <td>
                        @if (propValue != null && !propValue.GetType().IsValueType)
                        {
                            if (propValue is System.Collections.IEnumerable)
                            {
                                @DumpModel(propValue, true)
                            }
                            else
                            {
                                @:Something else
                        }
                        }
                        else
                        {
                            <code>@propValueString</code>
                        }
                    </td>
                    <td>
                        @if (propValue != null && !propValue.GetType().IsValueType)
                        {
                            @:+
                    }
                    </td>
                </tr>
            }
        </tbody>
    </table>

}
